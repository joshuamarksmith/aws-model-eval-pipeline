const { S3Client, GetObjectCommand } = require("@aws-sdk/client-s3");
const { SSMClient, GetParameterCommand } = require("@aws-sdk/client-ssm");

let cachedRules = null;
async function loadRules() {
  if (cachedRules) return cachedRules;

  // 1) read SSM pointer
  const ssm = new SSMClient({});
  const p    = await ssm.send(new GetParameterCommand({
    Name: "/modelops/prompt-wrappers/version"
  }));
  const { bucket, key } = JSON.parse(p.Parameter.Value);

  // 2) fetch JSON from S3
  const s3  = new S3Client({});
  const obj = await s3.send(new GetObjectCommand({ Bucket: bucket, Key: key }));
  // collect the stream:
  const body = await new Promise((res, rej) => {
    let data = "";
    obj.Body.on("data", chunk => data += chunk);
    obj.Body.on("end", () => res(data));
    obj.Body.on("error", rej);
  });
  const json = JSON.parse(body);

  // 3) compile regex rules
  cachedRules = json.rules.map(r => ({
    match: new RegExp(r.match),
    prefix: r.prefix,
    suffix: r.suffix
  }));
  return cachedRules;
}

async function wrapPrompt(modelId, text) {
  const rules = await loadRules();
  const rule = rules.find(r => r.match.test(modelId));
  if (!rule) {
    throw new Error(`No matching rule found for modelId: ${modelId}`);
  }
  return `${rule.prefix}${text}${rule.suffix}`;
}

module.exports = { wrapPrompt };
